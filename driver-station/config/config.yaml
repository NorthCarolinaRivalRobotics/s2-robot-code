session:
  mode: peer  # Mesh network

nodes:
  # Simple Teleop Node - PS5 controller to robot movement
  - type: nodes.teleop_node.TeleopNode
    params:
      robot_id: "cash"
      update_rate: 30.0  # Hz
      max_linear_speed: 3.0  # Maximum linear velocity (m/s)
      max_angular_speed: 2.0  # Maximum angular velocity (rad/s)
      deadzone: 0.05  # Controller deadzone
      field_relative: true  # Use odometry to drive in field frame

  # Go-To-Position controller node (publishes autonomy twist)
  - type: nodes.goto_node.GoToPositionNode
    params:
      robot_id: "cash"
      update_rate: 30.0
      # PD gains and tolerances (match validated math)
      kp_lin: 3.0
      kd_lin: 0.0
      kp_ang: 0.8
      kd_ang: 0.2
      stop_pos_tol_m: 0.03
      stop_ang_tol_rad: 0.0174533  # ~1 deg
      near_zero_lin: 0.05
      near_zero_ang: 0.05

  # Priority-based command multiplexer
  - type: tide.components.MuxNode
    params:
      robot_id: cash
      inputs:
        - topic: /cash/cmd/teleop
          priority: 0   # Highest priority (manual override)
        - topic: /cash/cmd/autonomy
          priority: 1
      output_topic: /cash/cmd/twist  # Publishes to /cash/cmd/twist
      msg_type: tide.models.common.Twist2D

  # Robot Odometry Node - subscribes to velocity twists and IMU data
  - type: nodes.robot_odometry.RobotOdometryNode
    params:
      robot_id: "cash"
      update_rate: 30.0  # Hz

  # Rerun Visualization Node - subscribes to odometry/IMU and renders a 3D cube
  - type: nodes.rerun_viz.RerunVizNode
    params:
      robot_id: "cash"
      update_rate: 30.0  # Hz
      # Subscribe to Pose2D computed by the odometry node
      odom_topic: "/cash/state/pose2d"
      twist_topic: "/cash/state/twist"
      imu_quat_topic: "/cash/sensor/imu/quat"
      integrate_twist_if_needed: false
